import pickle
from django.shortcuts import render,redirect
from django.http import JsonResponse
from django.core.files.storage import FileSystemStorage
import os
from core.settings import BASE_DIR
from Main.FeaturesExtraction import extract_features

# Load the trained model
model_path = os.path.join(BASE_DIR, 'MalwareModel/Malware.pkl')
with open(model_path, 'rb') as model_file:
    model = pickle.load(model_file)

def Home(request):
    if request.method == 'POST' and request.FILES['file']:
        uploaded_file = request.FILES['file']
        fs = FileSystemStorage()
        file_path_temp = fs.save(uploaded_file.name, uploaded_file)
        file_path = os.path.join(BASE_DIR, 'media/', file_path_temp)
        # Check if the file exists
        if not os.path.exists(file_path):
            return JsonResponse({'message': 'File not found.', 'malware': False})

        # Read the uploaded file and extract features
        file_features = extract_features(file_path)

        # Predict using the loaded model
        is_malware = model.predict([file_features])[0]

        if is_malware == 1:
            os.remove
            return JsonResponse({'message': 'The file is detected as malware.', 'malware': True})
        else:
            return JsonResponse({'message': 'The file is safe and has been compressed.', 'malware': False, 'fileName': file_path_temp})

    return render(request, 'index.html')

def Compression(request,filename):
    if not filename:
        return redirect("/404")
    filepath= os.path.join(BASE_DIR, 'media/', filename)
    if not os.path.exists(filepath):
        return redirect("/404")


















def Custom404(request):
    return render(request,"404.html")