import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier
import pickle
import pefile
from django.shortcuts import render
from django.http import JsonResponse
from django.core.files.storage import FileSystemStorage
import os
from core.settings import BASE_DIR
from Main.FeaturesExtraction import extract_features

# Load the trained model
model_path = os.path.join(BASE_DIR, 'MalwareModel/Malware.pkl')
with open(model_path, 'rb') as model_file:
    model = pickle.load(model_file)

def Home(request):
    if request.method == 'POST' and request.FILES['file']:
        uploaded_file = request.FILES['file']
        fs = FileSystemStorage()
        file_path = fs.save(uploaded_file.name, uploaded_file)
        print(file_path)
        file_path = os.path.join(BASE_DIR, 'media/', file_path)
        print(file_path)
        # Check if the file exists
        if not os.path.exists(file_path):
            return JsonResponse({'message': 'File not found.', 'malware': False})

        # Read the uploaded file and extract features
        file_features = extract_features(file_path)

        # Predict using the loaded model
        is_malware = model.predict([file_features])[0]

        if is_malware == 1:
            return JsonResponse({'message': 'The file is detected as malware.', 'malware': True})
        else:
            # compressed_file_path = compress_file(file_path)
            compressed_file_path = "Compress Successfully"
            return JsonResponse({'message': 'The file is safe and has been compressed.', 'malware': False, 'compressed_file_url': compressed_file_path})

    return render(request, 'index.html')

# /home/wabisabi/Desktop/MalwareDetectionApp/media/error.exe

