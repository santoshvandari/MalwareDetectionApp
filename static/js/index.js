document.addEventListener('DOMContentLoaded', () => {
    const toggle = document.getElementById('theme-toggle');
    toggle.addEventListener('change', () => {
        document.body.classList.toggle('dark-mode', toggle.checked);
    });

    // Optional: Save the theme preference to local storage
    if (localStorage.getItem('theme') === 'dark') {
        document.body.classList.add('dark-mode');
        toggle.checked = true;
    }

    toggle.addEventListener('change', () => {
        if (toggle.checked) {
            document.body.classList.add('dark-mode');
            localStorage.setItem('theme', 'dark');
        } else {
            document.body.classList.remove('dark-mode');
            localStorage.setItem('theme', 'light');
        }
    });

    // Handle form submission
    document.getElementById('uploadForm').addEventListener('submit', function(event) {
        event.preventDefault(); // Prevent the default form submission
        

        let formData = new FormData(this);
        const fileInput = document.getElementById('fileInput');
        // Check if a file is selected
        if (!fileInput.files.length) {
            alert("Please Select a File to Upload");
            return;
        }
    
        const loadingOverlay = document.getElementById('loading-overlay');

        // Show loading overlay
        loadingOverlay.style.display = 'flex';

        fetch('/', {
            method: 'POST',
            body: formData,
            headers: {
                'X-CSRFToken': getCookie('csrftoken') // Include CSRF token
            }
        })
        .then(response => response.json())
        .then(data => {
        loadingOverlay.style.display = 'none';

            if (data.malware) {
                // Play warning sound
                const warningSound = document.getElementById('warning-sound');
                warningSound.play();

                // Show custom dialog box
                showAlert('Malware Detected', data.message);
            } else if(data.fileName){
                // Handle file compression success
                // alert(data.message);
                location.href = '/compress?filename=' + data.fileName;
            }else{
                // Handle file compression failure
                alert("* Something Went Wrong!! Please Try Again");
            }
        })
        .catch(error => console.error('Error:', error));
    });

    function showAlert(title, message) {
        const dialog = document.getElementById('dialog');
        const dialogMessage = document.getElementById('dialog-message');
        const cancelButton = document.querySelector('#dialog .cancel');
        
        dialogMessage.textContent = message;
        dialog.style.display = 'flex';

        cancelButton.addEventListener('click', () => {
            dialog.style.display = 'none';
        });
    }

    function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }

    // Handle file input change
    const fileInput = document.getElementById('fileInput');
    const fileInfo = document.getElementById('file-info');

    fileInput.addEventListener('change', () => {
        if (fileInput.files.length > 0) {
            fileInfo.textContent = `Selected file: ${fileInput.files[0].name}`;
        } else {
            fileInfo.textContent = 'No file selected';
        }
    });
});
